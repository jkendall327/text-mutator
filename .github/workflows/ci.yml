name: Rust

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"
        type: choice
        options:
          - info
          - warning
          - debug
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  CARGO_TERM_COLOR: always

permissions:
  id-token: write
  contents: read

jobs:
  backend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build the backend
        run: cargo build --verbose --manifest-path backend/Cargo.toml

      - name: Test the backend
        run: cargo test --verbose --manifest-path backend/Cargo.toml

  frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.3.0
        with:
          node-version: 23
          cache: "npm"
          cache-dependency-path: "frontend/package.json"

      - name: Build the frontend
        run: npm --prefix frontend ci

      - name: Test the frontend
        run: npm run --prefix frontend test

  deploy:
    runs-on: ubuntu-latest
    needs: [frontend, backend]

    steps:
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy via Bicep
        uses: Azure/bicep-deploy@v2.1.0
        with:
          # Specifies the execution type, which can be either 'deployment' or 'deploymentStack'.
          type: "deploymentStack"
          # Specifies the operation to perform. For deployment, choose from 'create', 'validate', 'whatIf'. For deploymentStack, choose from 'create', 'delete', 'validate'.
          operation: "create"
          # Specifies the name of the deployment or deploymentStack.
          name:
          # Specifies the location of the deployment or deploymentStack. Must be provided if the 'scope' parameter is 'subscription', 'managementGroup' or 'tenant'.
          location: "westeurope"
          # Specifies the scope of the deployment or deploymentStack. For deployment, choose from 'resourceGroup', 'subscription', 'managementGroup', 'tenant'. For deploymentStack, choose from 'resourceGroup', 'subscription', 'managementGroup'.
          scope: "subscription"
          # Specifies the path to the template file.
          template-file: .infra/main.bicep
          # Specifies the path to the parameters file.
          parameters-file: .infra/parameters.bicepparam
          # Specifies the change types to exclude from the 'What If' operation.
          what-if-exclude-change-types: # optional
          # Specifies the action to take on unmanaged resources. Choose from 'delete' or 'detach'.
          action-on-unmanage-resources: delete

          # TODO
          # Push the rust image to ACR
          # Push the frontend to Azure static apps

          # https://docs.github.com/en/actions/use-cases-and-examples/deploying/deploying-to-azure-static-web-app

          # - name: Build And Deploy
          # uses: Azure/static-web-apps-deploy@1a947af9992250f3bc2e68ad0754c0b0c11566c9
          # with:
          #   azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          #   repo_token: ${{ secrets.GITHUB_TOKEN }}
          #   action: "upload"
          #   app_location: ${{ env.APP_LOCATION }}
          #   api_location: ${{ env.API_LOCATION }}
          #   output_location: ${{ env.OUTPUT_LOCATION }}

          # https://learn.microsoft.com/en-us/azure/container-instances/container-instances-github-action

        #   - name: 'Build and push image'
        #   uses: azure/docker-login@v1
        #   with:
        #     login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        #     username: ${{ secrets.REGISTRY_USERNAME }}
        #     password: ${{ secrets.REGISTRY_PASSWORD }}
        # - run: |
        #     docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/sampleapp:${{ github.sha }}
        #     docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/sampleapp:${{ github.sha }}

        # - name: 'Deploy to Azure Container Instances'
        #   uses: 'azure/aci-deploy@v1'
        #   with:
        #     resource-group: ${{ secrets.RESOURCE_GROUP }}
        #     dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
        #     image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/sampleapp:${{ github.sha }}
        #     registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        #     registry-username: ${{ secrets.REGISTRY_USERNAME }}
        #     registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        #     name: aci-sampleapp
        #     location: 'west us'
